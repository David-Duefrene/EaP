generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

enum Gender {
	female
	male
}

model Character {
	key        	 			Int @id @default(autoincrement())
	name      	 			String @unique
	createdAt 	 			DateTime @default(now())
	updatedAt 	 			DateTime @updatedAt
	characterID	 			String @unique
	characterSheet			CharacterSheet?
	agentResearch			AgentResearch[]
	// blueprint				Blueprint[]
	// corpHistory	 			CorpHistory[]
	// Fatigue		 			Fatigue?
	// Medals		 			Medal[]
	// Notifications			Notification[]
	// ContactNotifications	ContactNotification[]
	// CorpRoles				CorpRoles?
	// Standings				Standings[]
	// Title					Title?
}

model CharacterSheet {
	characterID				String @unique
	character 	 			Character @relation(fields: [characterID], references: [characterID])
	allianceID 	 			BigInt
	birthday  	 			DateTime
	bloodlineID 			Int // TODO {STATIC-ASSETS} convert to enum
	corporationID			Int
	description 			String
	gender 		 			Gender
	name 					String @unique
	raceID 		 			Int // TODO {STATIC-ASSETS} convert to enum
	securityStatus			Float
}

model AgentResearch {
	characterID				String
	character		 		Character @relation(fields: [characterID], references: [characterID])
	agentID					Int @unique
	pointsPerDay			Float
	remainderPoints			Float
	skillTypeID				Int // TODO {STATIC-ASSETS} convert to enum
	startedAt				String
}

// model Blueprint {
// 	characterID				BigInt
// 	itemID					Int @unique
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	locationFlag			String
// 	locationID				BigInt
// 	materialEfficiency		Int
// 	quantity				Int
// 	runs					Int
// 	timeEfficiency			Int
// 	typeID					Int
// }

// model CorpHistory {
// 	characterID				Int
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	corporationID			Int
// 	recordID				Int @unique
// 	startDate				DateTime
// 	isDeleted				Boolean @default(false)
// }

// model Fatigue {
// 	characterID				Int @unique
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	lastJumpDate			DateTime
// 	lastUpdateDate			DateTime
// 	fatigueExpires			DateTime
// }

// model Graphic {
// 	key						Int @id @default(autoincrement())
// 	medalID					Int
// 	color 					Int
// 	graphic					String
// 	layer 					Int
// 	part 					Int
// 	medal 					Medal @relation(fields: [medalID], references: [medalID])
// }

// model Medal {
// 	characterID				BigInt
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	corporationID 			Int
// 	date 					DateTime
// 	description				String
// 	graphics				Graphic[]
// 	issuerID 				Int
// 	medalID 				Int @unique
// 	reason 					String
// 	status					String
// 	title 					String
// }

// model Notification {
// 	characterID				BigInt
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	isRead					Boolean @default(false)
// 	notificationID			Int @unique
// 	senderID				Int
// 	senderType				String
// 	text					String
// 	timestamp				DateTime
// 	type					String
// }

// model ContactNotification {
// 	characterID				BigInt
// 	notification			Character @relation(fields: [characterID], references: [characterID])
// 	message 				String
// 	notificationID			Int @unique
// 	sendDate				DateTime
// 	senderCharacterID		Int
// 	standingLevel			Float
// }

// model CorpRoles {
// 	characterID				BigInt @unique
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	//TODO: make all rols lists of strings after Postgres is implemented
// 	roles					String
// 	rolesAtBase				String
// 	rolesAtHQ				String
// 	rolesAtOther			String
// }

// model Standings {
// 	characterID				BigInt
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	fromID					Int @unique
// 	fromType				String
// 	standing				Float
// }

// model Title {
// 	characterID				BigInt @unique
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	titleID					Int
// 	name					String
// }
