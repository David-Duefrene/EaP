generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

enum Gender {
	female
	male
}

enum LocationFlag {
	AutoFit
	Cargo
	CorpseBay
	DroneBay
	FleetHangar
	Deliveries
	HiddenModifiers
	Hangar
	HangarAll
	LoSlot0
	LoSlot1
	LoSlot2
	LoSlot3
	LoSlot4
	LoSlot5
	LoSlot6
	LoSlot7
	MedSlot0
	MedSlot1
	MedSlot2
	MedSlot3
	MedSlot4
	MedSlot5
	MedSlot6
	MedSlot7
	HiSlot0
	HiSlot1
	HiSlot2
	HiSlot3
	HiSlot4
	HiSlot5
	HiSlot6
	HiSlot7
	AssetSafety
	Locked
	Unlocked
	Implant
	QuafeBay
	RigSlot0
	RigSlot1
	RigSlot2
	RigSlot3
	RigSlot4
	RigSlot5
	RigSlot6
	RigSlot7
	ShipHangar
	SpecializedFuelBay
	SpecializedOreHold
	SpecializedGasHold
	SpecializedMineralHold
	SpecializedSalvageHold
	SpecializedShipHold
	SpecializedSmallShipHold
	SpecializedMediumShipHold
	SpecializedLargeShipHold
	SpecializedIndustrialShipHold
	SpecializedAmmoHold
	SpecializedCommandCenterHold
	SpecializedPlanetaryCommoditiesHold
	SpecializedMaterialBay
	SubSystemSlot0
	SubSystemSlot1
	SubSystemSlot2
	SubSystemSlot3
	SubSystemSlot4
	SubSystemSlot5
	SubSystemSlot6
	SubSystemSlot7
	FighterBay
	FighterTube0
	FighterTube1
	FighterTube2
	FighterTube3
	FighterTube4
	Module
}

model Character {
	key        	 			Int @id @default(autoincrement())
	name      	 			String @unique
	createdAt 	 			DateTime @default(now())
	updatedAt 	 			DateTime @updatedAt
	characterID	 			String @unique
	characterSheet			CharacterSheet?
	agentResearch			AgentResearch[]
	blueprint				Blueprint[]
	corpHistory	 			CorpHistory[]
	Fatigue		 			Fatigue?
	// Medals		 			Medal[]
	// Notifications			Notification[]
	// ContactNotifications	ContactNotification[]
	// CorpRoles				CorpRoles?
	// Standings				Standings[]
	// Title					Title?
}

model CharacterSheet {
	characterID				String @unique
	character 	 			Character @relation(fields: [characterID], references: [characterID])
	allianceID 	 			Int?
	birthday  	 			DateTime
	bloodlineID 			Int
	corporationID			Int
	description 			String?
	factionID 	 			Int?
	gender 		 			Gender
	name 					String @unique
	raceID 		 			Int
	securityStatus			Float?
	title 					String?
}

model AgentResearch {
	character		 		Character[]
	agentID					Int @id
	pointsPerDay			Float
	remainderPoints			Float
	skillTypeID				Int
	startedAt				String
}

model Blueprint {
	itemID					Int @id
	character				Character[]
	locationFlag			LocationFlag
	locationID				Int
	materialEfficiency		Int
	quantity				Int
	runs					Int
	timeEfficiency			Int
	typeID					Int
}

model CorpHistory {
	character				Character[]
	corporationID			Int
	recordID				Int @id
	startDate				DateTime
	isDeleted				Boolean @default(false)
}

model Fatigue {
	characterID				String @id
	character				Character @relation(fields: [characterID], references: [characterID])
	lastJumpDate			DateTime
	lastUpdateDate			DateTime
	jumpFatigueExpireDate	DateTime
}

// model Graphic {
// 	key						Int @id @default(autoincrement())
// 	medalID					Int
// 	color 					Int
// 	graphic					String
// 	layer 					Int
// 	part 					Int
// 	medal 					Medal @relation(fields: [medalID], references: [medalID])
// }

// model Medal {
// 	characterID				BigInt
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	corporationID 			Int
// 	date 					DateTime
// 	description				String
// 	graphics				Graphic[]
// 	issuerID 				Int
// 	medalID 				Int @unique
// 	reason 					String
// 	status					String
// 	title 					String
// }

// model Notification {
// 	characterID				BigInt
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	isRead					Boolean @default(false)
// 	notificationID			Int @unique
// 	senderID				Int
// 	senderType				String
// 	text					String
// 	timestamp				DateTime
// 	type					String
// }

// model ContactNotification {
// 	characterID				BigInt
// 	notification			Character @relation(fields: [characterID], references: [characterID])
// 	message 				String
// 	notificationID			Int @unique
// 	sendDate				DateTime
// 	senderCharacterID		Int
// 	standingLevel			Float
// }

// model CorpRoles {
// 	characterID				BigInt @unique
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	//TODO: make all rols lists of strings after Postgres is implemented
// 	roles					String
// 	rolesAtBase				String
// 	rolesAtHQ				String
// 	rolesAtOther			String
// }

// model Standings {
// 	characterID				BigInt
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	fromID					Int @unique
// 	fromType				String
// 	standing				Float
// }

// model Title {
// 	characterID				BigInt @unique
// 	character				Character @relation(fields: [characterID], references: [characterID])
// 	titleID					Int
// 	name					String
// }
