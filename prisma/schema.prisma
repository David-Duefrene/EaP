generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "sqlite"
	url      = "file:./dev.db?connection_limit=1&pool_timeout=0"
}

model Character {
	key        	 	Int @id @default(autoincrement())
	name      	 	String @unique
	createdAt 	 	DateTime @default(now())
	updatedAt 	 	DateTime @updatedAt
	characterID	 	String @unique
	characterSheet	CharacterSheet[]
	agentResearch	AgentResearch[]
	blueprint		Blueprint[]
	corpHistory	 	CorpHistory[]
	Fatigue		 	Fatigue?
	Medals		 	Medal[]
	Notifications	Notification[]
}

model CharacterSheet {
	key				Int @id
	character 	 	Character @relation(fields: [key], references: [key])
	allianceID 	 	Int
	birthday  	 	DateTime
	bloodlineID 	Int
	corporationID	Int
	description 	String
	gender 		 	String
	name 			String @unique
	raceID 		 	Int
	securityStatus	Float
}

model AgentResearch {
	key			 		Int @id
	characterID			Int
	character		 	Character @relation(fields: [key], references: [key])
	agentID				Int
	pointsPerDay		Float
	remainderPoints		Float
	skillTypeID			Int
	startedAt			String
}

model Blueprint {
	characterID				String
	itemID					BigInt @unique
	character				Character @relation(fields: [characterID], references: [characterID])
	locationFlag			String
	locationID				BigInt
	materialEfficiency		Int
	quantity				Int
	runs					Int
	timeEfficiency			Int
	typeID					Int
}

model CorpHistory {
	characterID			String
	character			Character @relation(fields: [characterID], references: [characterID])
	corporationID		Int
	recordID			Int @unique
	startDate			DateTime
	isDeleted			Boolean @default(false)
}

model Fatigue {
	characterID		String @unique
	character		Character @relation(fields: [characterID], references: [characterID])
	lastJumpDate	DateTime
	lastUpdateDate	DateTime
	fatigueExpires	DateTime
}

model Graphic {
	key				Int @id @default(autoincrement())
	medalID			Int
	color 			Int
	graphic			String
	layer 			Int
	part 			Int
	medal 			Medal @relation(fields: [medalID], references: [medalID])
}

model Medal {
	characterID		String
	character		Character @relation(fields: [characterID], references: [characterID])
	corporationID 	Int
	date 			DateTime
	description		String
	graphics		Graphic[]
	issuerID 		Int
	medalID 		Int @unique
	reason 			String
	status			String
	title 			String
}

model Notification {
	characterID		String
	character		Character @relation(fields: [characterID], references: [characterID])
	isRead			Boolean @default(false)
	notificationID	Int @unique
	senderID		Int
	senderType		String
	text			String
	timestamp		DateTime
	type			String
}
